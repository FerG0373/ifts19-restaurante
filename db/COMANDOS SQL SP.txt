DELIMITER //
CREATE PROCEDURE sp_personal_select_by_id(
    IN personal_id INT
)
BEGIN
    SELECT 
        id, 
        dni, 
        nombre, 
        apellido, 
        fecha_nacimiento, 
        email, 
        telefono, 
        sexo, 
        puesto, 
        fecha_contratacion,
        activo
    FROM 
        personal
    WHERE 
        id = personal_id;
END //
DELIMITER ;



DELIMITER //
CREATE PROCEDURE sp_personal_select_all()
BEGIN
    SELECT 
        p.id,
        p.dni,
        p.nombre,
        p.apellido,
        p.fecha_nacimiento,
        p.email,
        p.telefono,
        p.sexo,
        p.puesto,
        p.fecha_contratacion,
        
        u.id 'idUsuario',
        u.pass_hash,
        u.perfil_acceso,
        u.activo
    FROM
        personal p
	INNER JOIN
		usuario u
	ON
		p.id = u.id
	ORDER BY apellido;
END //
DELIMITER ;



DELIMITER //
CREATE PROCEDURE sp_personal_select_by_id(
    IN personal_id INT
)
BEGIN
    SELECT 
        p.id, 
        p.dni, 
        p.nombre, 
        p.apellido, 
        p.fecha_nacimiento, 
        p.email, 
        p.telefono, 
        p.sexo, 
        p.puesto, 
        p.fecha_contratacion,
        u.id 'idUsuario',
        u.pass_hash,
        u.perfil_acceso,
        u.activo
    FROM 
        personal p
	INNER JOIN
		usuario u
	ON
		p.id = u.id    
    WHERE 
        p.id = 1;
END //
DELIMITER ;



DELIMITER //
CREATE PROCEDURE sp_personal_existe_dni(
    IN personal_dni VARCHAR(20)
)
BEGIN
    SELECT 
        1 
    FROM 
        personal
    WHERE 
        dni = personal_dni
    LIMIT 1; -- Detiene la búsqueda después de la primera coincidencia
END //
DELIMITER ;



DELIMITER //
CREATE PROCEDURE sp_personal_existe_email(
    IN personal_email VARCHAR(100)
)
BEGIN
    SELECT 
        1 
    FROM 
        personal
    WHERE 
        email = personal_email
    LIMIT 1;
END //
DELIMITER ;



DELIMITER //
CREATE PROCEDURE sp_personal_insert(
    -- Parámetros de Personal (los campos no automatizados)
    IN p_dni VARCHAR(20),
    IN p_nombre VARCHAR(100),
    IN p_apellido VARCHAR(100),
    IN p_email VARCHAR(100),
    IN p_telefono VARCHAR(20),
    IN p_fecha_nacimiento DATE,
    IN p_sexo CHAR(1),
    IN p_puesto VARCHAR(50),
    -- Parámetros de Usuario (los campos no automatizados)
    IN u_perfil_acceso VARCHAR(50),
    IN u_pass_hash VARCHAR(255)    
)
BEGIN
    START TRANSACTION;
    -- 1. Insertar en Personal
    INSERT INTO personal (dni, nombre, apellido, email, telefono, fecha_nacimiento, sexo, puesto, fecha_contratacion)
    VALUES (p_dni, p_nombre, p_apellido, p_email, p_telefono, p_fecha_nacimiento, p_sexo, p_puesto, CURDATE());

    SET @personal_id = LAST_INSERT_ID();

    -- 2. Insertar en Usuario
    INSERT INTO usuario (id, perfil_acceso, pass_hash, activo) 
    VALUES (@personal_id, u_perfil_acceso, u_pass_hash, TRUE);

COMMIT;
	-- 3. Select para devolver el ID nuevo id generado.
    SELECT @personal_id 'nuevoId';
END //
DELIMITER ;



DELIMITER //
CREATE PROCEDURE sp_personal_update(
    IN p_id INT,
    IN p_dni VARCHAR(20), 
    IN p_nombre VARCHAR(100),
    IN p_apellido VARCHAR(100),
    IN p_email VARCHAR(100),
    IN p_telefono VARCHAR(20),
    IN p_fecha_nacimiento DATE,
    IN p_sexo CHAR(1),
    IN p_puesto VARCHAR(50),
    
    IN u_id INT,
    IN u_perfil_acceso VARCHAR(50),
    IN u_activo TINYINT(1)
)
BEGIN
    -- Definine un manejador para cualquier error SQL.
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        -- Deshacer si algo falló.
        ROLLBACK;
        -- Re-lanzar la excepción para que el PDO de PHP la capture.
        RESIGNAL;
    END;
    START TRANSACTION;
    -- Actualiza la tabla Personal.
    UPDATE personal
    SET
        nombre = p_nombre,
        apellido = p_apellido,
        email = p_email,
        telefono = p_telefono,
        fecha_nacimiento = p_fecha_nacimiento,
        sexo = p_sexo,
        puesto = p_puesto
    WHERE 
        id = p_id;        
    -- Actualizar la tabla Usuario.
    UPDATE usuario
    SET
        perfil_acceso = u_perfil_acceso,
        activo = u_activo
    WHERE 
        id = u_id;
    -- Si todo es correcto, confirmar la transacción.
    COMMIT;
END //
DELIMITER ;